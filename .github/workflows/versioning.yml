name: Automatic Versioning

on:
  push:
    branches: [main, next]
  workflow_dispatch:

permissions:
  contents: write 
  packages: write  
  id-token: write  

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
      
      - name: Determine changed libraries
        id: changed-libs
        run: |
          npx lerna changed --json > changed-libs.json
          cat changed-libs.json
          echo "changed_libraries=$(cat changed-libs.json | jq -r '.[].name' | paste -sd ',' -)" >> $GITHUB_ENV
    
      - name: Run versioning script
        run: |
          chmod +x ./scripts/version-by-branch.sh
          ./scripts/version-by-branch.sh
      
      - name: Push changes and tags
        run: git push --follow-tags

      - name: Build changed libraries
        run: |
          if [ -n "$changed_libraries" ]; then
            for lib in $(echo $changed_libraries | tr "," "\n"); do
              echo "Building $lib..."
              ng build $lib 
            done
          else
            echo "No libraries to build."
          fi
      
      - name: Publish changed libraries to NPM
        run: |
          if [ -n "$changed_libraries" ]; then
            for lib in $(echo $changed_libraries | tr "," "\n"); do
              echo "Publishing $lib to NPM..."
              cd dist/$lib
              
              if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
                NPM_TAG="latest"
              elif [[ "$GITHUB_REF" == "refs/heads/next" ]]; then
                NPM_TAG="next"
              else
                NPM_TAG="beta"
              fi

              # Publication sur NPM avec le tag approprié
              npm publish --tag $NPM_TAG
              cd -  # Retourner à la racine du repo
            done
          else
            echo "No libraries to publish."
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}